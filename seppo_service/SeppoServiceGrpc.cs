// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seppo_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace SeppoService {
  /// <summary>
  /// Queries
  /// </summary>
  public static partial class Seppo
  {
    static readonly string __ServiceName = "SeppoService.Seppo";

    static readonly grpc::Marshaller<global::SeppoService.ListenForChangedEwSongRequest> __Marshaller_ListenForChangedEwSongRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SeppoService.ListenForChangedEwSongRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SeppoService.EwSong> __Marshaller_EwSong = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SeppoService.EwSong.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SeppoService.SyncEwDatabaseRequest> __Marshaller_SyncEwDatabaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SeppoService.SyncEwDatabaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SeppoService.SyncEwDatabaseResponse> __Marshaller_SyncEwDatabaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SeppoService.SyncEwDatabaseResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::SeppoService.ListenForChangedEwSongRequest, global::SeppoService.EwSong> __Method_listenForChangedEwSong = new grpc::Method<global::SeppoService.ListenForChangedEwSongRequest, global::SeppoService.EwSong>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listenForChangedEwSong",
        __Marshaller_ListenForChangedEwSongRequest,
        __Marshaller_EwSong);

    static readonly grpc::Method<global::SeppoService.SyncEwDatabaseRequest, global::SeppoService.SyncEwDatabaseResponse> __Method_syncEwDatabase = new grpc::Method<global::SeppoService.SyncEwDatabaseRequest, global::SeppoService.SyncEwDatabaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "syncEwDatabase",
        __Marshaller_SyncEwDatabaseRequest,
        __Marshaller_SyncEwDatabaseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SeppoService.SeppoServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Seppo</summary>
    public abstract partial class SeppoBase
    {
      public virtual global::System.Threading.Tasks.Task listenForChangedEwSong(global::SeppoService.ListenForChangedEwSongRequest request, grpc::IServerStreamWriter<global::SeppoService.EwSong> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SeppoService.SyncEwDatabaseResponse> syncEwDatabase(global::SeppoService.SyncEwDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Seppo</summary>
    public partial class SeppoClient : grpc::ClientBase<SeppoClient>
    {
      /// <summary>Creates a new client for Seppo</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SeppoClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Seppo that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SeppoClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SeppoClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SeppoClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::SeppoService.EwSong> listenForChangedEwSong(global::SeppoService.ListenForChangedEwSongRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return listenForChangedEwSong(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::SeppoService.EwSong> listenForChangedEwSong(global::SeppoService.ListenForChangedEwSongRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listenForChangedEwSong, null, options, request);
      }
      public virtual global::SeppoService.SyncEwDatabaseResponse syncEwDatabase(global::SeppoService.SyncEwDatabaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return syncEwDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SeppoService.SyncEwDatabaseResponse syncEwDatabase(global::SeppoService.SyncEwDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_syncEwDatabase, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SeppoService.SyncEwDatabaseResponse> syncEwDatabaseAsync(global::SeppoService.SyncEwDatabaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return syncEwDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SeppoService.SyncEwDatabaseResponse> syncEwDatabaseAsync(global::SeppoService.SyncEwDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_syncEwDatabase, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SeppoClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SeppoClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SeppoBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_listenForChangedEwSong, serviceImpl.listenForChangedEwSong)
          .AddMethod(__Method_syncEwDatabase, serviceImpl.syncEwDatabase).Build();
    }

  }
}
#endregion
