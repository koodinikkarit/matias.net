// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matias_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace MatiasService {
  public static partial class Matias
  {
    static readonly string __ServiceName = "MatiasService.Matias";

    static readonly grpc::Marshaller<global::MatiasService.SyncEwDatabaseRequest> __Marshaller_SyncEwDatabaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MatiasService.SyncEwDatabaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MatiasService.SyncEwDatabaseResponse> __Marshaller_SyncEwDatabaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MatiasService.SyncEwDatabaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MatiasService.InsertEwSongIdsRequest> __Marshaller_InsertEwSongIdsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MatiasService.InsertEwSongIdsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MatiasService.InsertEwSongIdsResponse> __Marshaller_InsertEwSongIdsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MatiasService.InsertEwSongIdsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MatiasService.ChangeEwSongIdsRequest> __Marshaller_ChangeEwSongIdsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MatiasService.ChangeEwSongIdsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MatiasService.ChangeEwSongIdsResponse> __Marshaller_ChangeEwSongIdsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MatiasService.ChangeEwSongIdsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::MatiasService.SyncEwDatabaseRequest, global::MatiasService.SyncEwDatabaseResponse> __Method_syncEwDatabase = new grpc::Method<global::MatiasService.SyncEwDatabaseRequest, global::MatiasService.SyncEwDatabaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "syncEwDatabase",
        __Marshaller_SyncEwDatabaseRequest,
        __Marshaller_SyncEwDatabaseResponse);

    static readonly grpc::Method<global::MatiasService.InsertEwSongIdsRequest, global::MatiasService.InsertEwSongIdsResponse> __Method_insertEwSongIds = new grpc::Method<global::MatiasService.InsertEwSongIdsRequest, global::MatiasService.InsertEwSongIdsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "insertEwSongIds",
        __Marshaller_InsertEwSongIdsRequest,
        __Marshaller_InsertEwSongIdsResponse);

    static readonly grpc::Method<global::MatiasService.ChangeEwSongIdsRequest, global::MatiasService.ChangeEwSongIdsResponse> __Method_changeEwSongIds = new grpc::Method<global::MatiasService.ChangeEwSongIdsRequest, global::MatiasService.ChangeEwSongIdsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "changeEwSongIds",
        __Marshaller_ChangeEwSongIdsRequest,
        __Marshaller_ChangeEwSongIdsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MatiasService.MatiasServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Matias</summary>
    public abstract partial class MatiasBase
    {
      public virtual global::System.Threading.Tasks.Task<global::MatiasService.SyncEwDatabaseResponse> syncEwDatabase(global::MatiasService.SyncEwDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::MatiasService.InsertEwSongIdsResponse> insertEwSongIds(global::MatiasService.InsertEwSongIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::MatiasService.ChangeEwSongIdsResponse> changeEwSongIds(global::MatiasService.ChangeEwSongIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Matias</summary>
    public partial class MatiasClient : grpc::ClientBase<MatiasClient>
    {
      /// <summary>Creates a new client for Matias</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MatiasClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Matias that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MatiasClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MatiasClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MatiasClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::MatiasService.SyncEwDatabaseResponse syncEwDatabase(global::MatiasService.SyncEwDatabaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return syncEwDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MatiasService.SyncEwDatabaseResponse syncEwDatabase(global::MatiasService.SyncEwDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_syncEwDatabase, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MatiasService.SyncEwDatabaseResponse> syncEwDatabaseAsync(global::MatiasService.SyncEwDatabaseRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return syncEwDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MatiasService.SyncEwDatabaseResponse> syncEwDatabaseAsync(global::MatiasService.SyncEwDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_syncEwDatabase, null, options, request);
      }
      public virtual global::MatiasService.InsertEwSongIdsResponse insertEwSongIds(global::MatiasService.InsertEwSongIdsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return insertEwSongIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MatiasService.InsertEwSongIdsResponse insertEwSongIds(global::MatiasService.InsertEwSongIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_insertEwSongIds, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MatiasService.InsertEwSongIdsResponse> insertEwSongIdsAsync(global::MatiasService.InsertEwSongIdsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return insertEwSongIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MatiasService.InsertEwSongIdsResponse> insertEwSongIdsAsync(global::MatiasService.InsertEwSongIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_insertEwSongIds, null, options, request);
      }
      public virtual global::MatiasService.ChangeEwSongIdsResponse changeEwSongIds(global::MatiasService.ChangeEwSongIdsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return changeEwSongIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MatiasService.ChangeEwSongIdsResponse changeEwSongIds(global::MatiasService.ChangeEwSongIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_changeEwSongIds, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MatiasService.ChangeEwSongIdsResponse> changeEwSongIdsAsync(global::MatiasService.ChangeEwSongIdsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return changeEwSongIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MatiasService.ChangeEwSongIdsResponse> changeEwSongIdsAsync(global::MatiasService.ChangeEwSongIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_changeEwSongIds, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MatiasClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MatiasClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MatiasBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_syncEwDatabase, serviceImpl.syncEwDatabase)
          .AddMethod(__Method_insertEwSongIds, serviceImpl.insertEwSongIds)
          .AddMethod(__Method_changeEwSongIds, serviceImpl.changeEwSongIds).Build();
    }

  }
}
#endregion
