// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: song_database_variation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SeppoService {

  /// <summary>Holder for reflection information generated from song_database_variation.proto</summary>
  public static partial class SongDatabaseVariationReflection {

    #region Descriptor
    /// <summary>File descriptor for song_database_variation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SongDatabaseVariationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1zb25nX2RhdGFiYXNlX3ZhcmlhdGlvbi5wcm90bxIMU2VwcG9TZXJ2aWNl",
            "Gg92YXJpYXRpb24ucHJvdG8iUAoVU29uZ0RhdGFiYXNlVmFyaWF0aW9uEgoK",
            "AmlkGAEgASgNEhYKDnNvbmdEYXRhYmFzZUlkGAIgASgNEhMKC3ZhcmlhdGlv",
            "bklkGAMgASgNIl0KFlNvbmdEYXRhYmFzZVZhcmlhdGlvbnMSFgoOc29uZ0Rh",
            "dGFiYXNlSWQYASABKA0SKwoKdmFyaWF0aW9ucxgCIAMoCzIXLlNlcHBvU2Vy",
            "dmljZS5WYXJpYXRpb24iQQomRmV0Y2hWYXJpYXRpb25zQnlTb25nRGF0YWJh",
            "c2VJZFJlcXVlc3QSFwoPc29uZ0RhdGFiYXNlSWRzGAEgAygNIm8KJ0ZldGNo",
            "VmFyaWF0aW9uc0J5U29uZ0RhdGFiYXNlSWRSZXNwb25zZRJEChZzb25nRGF0",
            "YWJhc2VWYXJpYXRpb25zGAEgAygLMiQuU2VwcG9TZXJ2aWNlLlNvbmdEYXRh",
            "YmFzZVZhcmlhdGlvbnMiUAohQWRkVmFyaWF0aW9uVG9Tb25nRGF0YWJhc2VS",
            "ZXF1ZXN0EhYKDnNvbmdEYXRhYmFzZUlkGAEgASgNEhMKC3ZhcmlhdGlvbklk",
            "GAIgASgNImgKIkFkZFZhcmlhdGlvblRvU29uZ0RhdGFiYXNlUmVzcG9uc2US",
            "QgoVc29uZ0RhdGFiYXNlVmFyaWF0aW9uGAEgASgLMiMuU2VwcG9TZXJ2aWNl",
            "LlNvbmdEYXRhYmFzZVZhcmlhdGlvbiJVCiZSZW1vdmVWYXJpYXRpb25Gcm9t",
            "U29uZ0RhdGFiYXNlUmVxdWVzdBIWCg5zb25nRGF0YWJhc2VJZBgBIAEoDRIT",
            "Cgt2YXJpYXRpb25JZBgCIAEoDSKaAQonUmVtb3ZlVmFyaWF0aW9uRnJvbVNv",
            "bmdEYXRhYmFzZVJlc3BvbnNlEkoKBXN0YXRlGAEgASgOMjsuU2VwcG9TZXJ2",
            "aWNlLlJlbW92ZVZhcmlhdGlvbkZyb21Tb25nRGF0YWJhc2VSZXNwb25zZS5T",
            "dGF0ZSIjCgVTdGF0ZRILCgdTVUNDRVNTEAASDQoJTk9UX0ZPVU5EEAFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SeppoService.VariationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.SongDatabaseVariation), global::SeppoService.SongDatabaseVariation.Parser, new[]{ "Id", "SongDatabaseId", "VariationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.SongDatabaseVariations), global::SeppoService.SongDatabaseVariations.Parser, new[]{ "SongDatabaseId", "Variations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.FetchVariationsBySongDatabaseIdRequest), global::SeppoService.FetchVariationsBySongDatabaseIdRequest.Parser, new[]{ "SongDatabaseIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.FetchVariationsBySongDatabaseIdResponse), global::SeppoService.FetchVariationsBySongDatabaseIdResponse.Parser, new[]{ "SongDatabaseVariations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.AddVariationToSongDatabaseRequest), global::SeppoService.AddVariationToSongDatabaseRequest.Parser, new[]{ "SongDatabaseId", "VariationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.AddVariationToSongDatabaseResponse), global::SeppoService.AddVariationToSongDatabaseResponse.Parser, new[]{ "SongDatabaseVariation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.RemoveVariationFromSongDatabaseRequest), global::SeppoService.RemoveVariationFromSongDatabaseRequest.Parser, new[]{ "SongDatabaseId", "VariationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.RemoveVariationFromSongDatabaseResponse), global::SeppoService.RemoveVariationFromSongDatabaseResponse.Parser, new[]{ "State" }, null, new[]{ typeof(global::SeppoService.RemoveVariationFromSongDatabaseResponse.Types.State) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SongDatabaseVariation : pb::IMessage<SongDatabaseVariation> {
    private static readonly pb::MessageParser<SongDatabaseVariation> _parser = new pb::MessageParser<SongDatabaseVariation>(() => new SongDatabaseVariation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SongDatabaseVariation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseVariationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabaseVariation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabaseVariation(SongDatabaseVariation other) : this() {
      id_ = other.id_;
      songDatabaseId_ = other.songDatabaseId_;
      variationId_ = other.variationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabaseVariation Clone() {
      return new SongDatabaseVariation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "songDatabaseId" field.</summary>
    public const int SongDatabaseIdFieldNumber = 2;
    private uint songDatabaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongDatabaseId {
      get { return songDatabaseId_; }
      set {
        songDatabaseId_ = value;
      }
    }

    /// <summary>Field number for the "variationId" field.</summary>
    public const int VariationIdFieldNumber = 3;
    private uint variationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VariationId {
      get { return variationId_; }
      set {
        variationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SongDatabaseVariation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SongDatabaseVariation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SongDatabaseId != other.SongDatabaseId) return false;
      if (VariationId != other.VariationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SongDatabaseId != 0) hash ^= SongDatabaseId.GetHashCode();
      if (VariationId != 0) hash ^= VariationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (SongDatabaseId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SongDatabaseId);
      }
      if (VariationId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(VariationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (SongDatabaseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongDatabaseId);
      }
      if (VariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VariationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SongDatabaseVariation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SongDatabaseId != 0) {
        SongDatabaseId = other.SongDatabaseId;
      }
      if (other.VariationId != 0) {
        VariationId = other.VariationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            SongDatabaseId = input.ReadUInt32();
            break;
          }
          case 24: {
            VariationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SongDatabaseVariations : pb::IMessage<SongDatabaseVariations> {
    private static readonly pb::MessageParser<SongDatabaseVariations> _parser = new pb::MessageParser<SongDatabaseVariations>(() => new SongDatabaseVariations());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SongDatabaseVariations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseVariationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabaseVariations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabaseVariations(SongDatabaseVariations other) : this() {
      songDatabaseId_ = other.songDatabaseId_;
      variations_ = other.variations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabaseVariations Clone() {
      return new SongDatabaseVariations(this);
    }

    /// <summary>Field number for the "songDatabaseId" field.</summary>
    public const int SongDatabaseIdFieldNumber = 1;
    private uint songDatabaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongDatabaseId {
      get { return songDatabaseId_; }
      set {
        songDatabaseId_ = value;
      }
    }

    /// <summary>Field number for the "variations" field.</summary>
    public const int VariationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SeppoService.Variation> _repeated_variations_codec
        = pb::FieldCodec.ForMessage(18, global::SeppoService.Variation.Parser);
    private readonly pbc::RepeatedField<global::SeppoService.Variation> variations_ = new pbc::RepeatedField<global::SeppoService.Variation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SeppoService.Variation> Variations {
      get { return variations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SongDatabaseVariations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SongDatabaseVariations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SongDatabaseId != other.SongDatabaseId) return false;
      if(!variations_.Equals(other.variations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SongDatabaseId != 0) hash ^= SongDatabaseId.GetHashCode();
      hash ^= variations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SongDatabaseId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SongDatabaseId);
      }
      variations_.WriteTo(output, _repeated_variations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SongDatabaseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongDatabaseId);
      }
      size += variations_.CalculateSize(_repeated_variations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SongDatabaseVariations other) {
      if (other == null) {
        return;
      }
      if (other.SongDatabaseId != 0) {
        SongDatabaseId = other.SongDatabaseId;
      }
      variations_.Add(other.variations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SongDatabaseId = input.ReadUInt32();
            break;
          }
          case 18: {
            variations_.AddEntriesFrom(input, _repeated_variations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FetchVariationsBySongDatabaseIdRequest : pb::IMessage<FetchVariationsBySongDatabaseIdRequest> {
    private static readonly pb::MessageParser<FetchVariationsBySongDatabaseIdRequest> _parser = new pb::MessageParser<FetchVariationsBySongDatabaseIdRequest>(() => new FetchVariationsBySongDatabaseIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchVariationsBySongDatabaseIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseVariationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationsBySongDatabaseIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationsBySongDatabaseIdRequest(FetchVariationsBySongDatabaseIdRequest other) : this() {
      songDatabaseIds_ = other.songDatabaseIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationsBySongDatabaseIdRequest Clone() {
      return new FetchVariationsBySongDatabaseIdRequest(this);
    }

    /// <summary>Field number for the "songDatabaseIds" field.</summary>
    public const int SongDatabaseIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_songDatabaseIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> songDatabaseIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SongDatabaseIds {
      get { return songDatabaseIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchVariationsBySongDatabaseIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchVariationsBySongDatabaseIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!songDatabaseIds_.Equals(other.songDatabaseIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= songDatabaseIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      songDatabaseIds_.WriteTo(output, _repeated_songDatabaseIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += songDatabaseIds_.CalculateSize(_repeated_songDatabaseIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchVariationsBySongDatabaseIdRequest other) {
      if (other == null) {
        return;
      }
      songDatabaseIds_.Add(other.songDatabaseIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            songDatabaseIds_.AddEntriesFrom(input, _repeated_songDatabaseIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FetchVariationsBySongDatabaseIdResponse : pb::IMessage<FetchVariationsBySongDatabaseIdResponse> {
    private static readonly pb::MessageParser<FetchVariationsBySongDatabaseIdResponse> _parser = new pb::MessageParser<FetchVariationsBySongDatabaseIdResponse>(() => new FetchVariationsBySongDatabaseIdResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchVariationsBySongDatabaseIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseVariationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationsBySongDatabaseIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationsBySongDatabaseIdResponse(FetchVariationsBySongDatabaseIdResponse other) : this() {
      songDatabaseVariations_ = other.songDatabaseVariations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationsBySongDatabaseIdResponse Clone() {
      return new FetchVariationsBySongDatabaseIdResponse(this);
    }

    /// <summary>Field number for the "songDatabaseVariations" field.</summary>
    public const int SongDatabaseVariationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SeppoService.SongDatabaseVariations> _repeated_songDatabaseVariations_codec
        = pb::FieldCodec.ForMessage(10, global::SeppoService.SongDatabaseVariations.Parser);
    private readonly pbc::RepeatedField<global::SeppoService.SongDatabaseVariations> songDatabaseVariations_ = new pbc::RepeatedField<global::SeppoService.SongDatabaseVariations>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SeppoService.SongDatabaseVariations> SongDatabaseVariations {
      get { return songDatabaseVariations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchVariationsBySongDatabaseIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchVariationsBySongDatabaseIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!songDatabaseVariations_.Equals(other.songDatabaseVariations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= songDatabaseVariations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      songDatabaseVariations_.WriteTo(output, _repeated_songDatabaseVariations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += songDatabaseVariations_.CalculateSize(_repeated_songDatabaseVariations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchVariationsBySongDatabaseIdResponse other) {
      if (other == null) {
        return;
      }
      songDatabaseVariations_.Add(other.songDatabaseVariations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            songDatabaseVariations_.AddEntriesFrom(input, _repeated_songDatabaseVariations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddVariationToSongDatabaseRequest : pb::IMessage<AddVariationToSongDatabaseRequest> {
    private static readonly pb::MessageParser<AddVariationToSongDatabaseRequest> _parser = new pb::MessageParser<AddVariationToSongDatabaseRequest>(() => new AddVariationToSongDatabaseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddVariationToSongDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseVariationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVariationToSongDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVariationToSongDatabaseRequest(AddVariationToSongDatabaseRequest other) : this() {
      songDatabaseId_ = other.songDatabaseId_;
      variationId_ = other.variationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVariationToSongDatabaseRequest Clone() {
      return new AddVariationToSongDatabaseRequest(this);
    }

    /// <summary>Field number for the "songDatabaseId" field.</summary>
    public const int SongDatabaseIdFieldNumber = 1;
    private uint songDatabaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongDatabaseId {
      get { return songDatabaseId_; }
      set {
        songDatabaseId_ = value;
      }
    }

    /// <summary>Field number for the "variationId" field.</summary>
    public const int VariationIdFieldNumber = 2;
    private uint variationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VariationId {
      get { return variationId_; }
      set {
        variationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddVariationToSongDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddVariationToSongDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SongDatabaseId != other.SongDatabaseId) return false;
      if (VariationId != other.VariationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SongDatabaseId != 0) hash ^= SongDatabaseId.GetHashCode();
      if (VariationId != 0) hash ^= VariationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SongDatabaseId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SongDatabaseId);
      }
      if (VariationId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VariationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SongDatabaseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongDatabaseId);
      }
      if (VariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VariationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddVariationToSongDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.SongDatabaseId != 0) {
        SongDatabaseId = other.SongDatabaseId;
      }
      if (other.VariationId != 0) {
        VariationId = other.VariationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SongDatabaseId = input.ReadUInt32();
            break;
          }
          case 16: {
            VariationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddVariationToSongDatabaseResponse : pb::IMessage<AddVariationToSongDatabaseResponse> {
    private static readonly pb::MessageParser<AddVariationToSongDatabaseResponse> _parser = new pb::MessageParser<AddVariationToSongDatabaseResponse>(() => new AddVariationToSongDatabaseResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddVariationToSongDatabaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseVariationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVariationToSongDatabaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVariationToSongDatabaseResponse(AddVariationToSongDatabaseResponse other) : this() {
      SongDatabaseVariation = other.songDatabaseVariation_ != null ? other.SongDatabaseVariation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVariationToSongDatabaseResponse Clone() {
      return new AddVariationToSongDatabaseResponse(this);
    }

    /// <summary>Field number for the "songDatabaseVariation" field.</summary>
    public const int SongDatabaseVariationFieldNumber = 1;
    private global::SeppoService.SongDatabaseVariation songDatabaseVariation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SeppoService.SongDatabaseVariation SongDatabaseVariation {
      get { return songDatabaseVariation_; }
      set {
        songDatabaseVariation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddVariationToSongDatabaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddVariationToSongDatabaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SongDatabaseVariation, other.SongDatabaseVariation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (songDatabaseVariation_ != null) hash ^= SongDatabaseVariation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (songDatabaseVariation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SongDatabaseVariation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (songDatabaseVariation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SongDatabaseVariation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddVariationToSongDatabaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.songDatabaseVariation_ != null) {
        if (songDatabaseVariation_ == null) {
          songDatabaseVariation_ = new global::SeppoService.SongDatabaseVariation();
        }
        SongDatabaseVariation.MergeFrom(other.SongDatabaseVariation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (songDatabaseVariation_ == null) {
              songDatabaseVariation_ = new global::SeppoService.SongDatabaseVariation();
            }
            input.ReadMessage(songDatabaseVariation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveVariationFromSongDatabaseRequest : pb::IMessage<RemoveVariationFromSongDatabaseRequest> {
    private static readonly pb::MessageParser<RemoveVariationFromSongDatabaseRequest> _parser = new pb::MessageParser<RemoveVariationFromSongDatabaseRequest>(() => new RemoveVariationFromSongDatabaseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveVariationFromSongDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseVariationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationFromSongDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationFromSongDatabaseRequest(RemoveVariationFromSongDatabaseRequest other) : this() {
      songDatabaseId_ = other.songDatabaseId_;
      variationId_ = other.variationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationFromSongDatabaseRequest Clone() {
      return new RemoveVariationFromSongDatabaseRequest(this);
    }

    /// <summary>Field number for the "songDatabaseId" field.</summary>
    public const int SongDatabaseIdFieldNumber = 1;
    private uint songDatabaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongDatabaseId {
      get { return songDatabaseId_; }
      set {
        songDatabaseId_ = value;
      }
    }

    /// <summary>Field number for the "variationId" field.</summary>
    public const int VariationIdFieldNumber = 2;
    private uint variationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VariationId {
      get { return variationId_; }
      set {
        variationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveVariationFromSongDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveVariationFromSongDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SongDatabaseId != other.SongDatabaseId) return false;
      if (VariationId != other.VariationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SongDatabaseId != 0) hash ^= SongDatabaseId.GetHashCode();
      if (VariationId != 0) hash ^= VariationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SongDatabaseId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SongDatabaseId);
      }
      if (VariationId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VariationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SongDatabaseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongDatabaseId);
      }
      if (VariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VariationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveVariationFromSongDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.SongDatabaseId != 0) {
        SongDatabaseId = other.SongDatabaseId;
      }
      if (other.VariationId != 0) {
        VariationId = other.VariationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SongDatabaseId = input.ReadUInt32();
            break;
          }
          case 16: {
            VariationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveVariationFromSongDatabaseResponse : pb::IMessage<RemoveVariationFromSongDatabaseResponse> {
    private static readonly pb::MessageParser<RemoveVariationFromSongDatabaseResponse> _parser = new pb::MessageParser<RemoveVariationFromSongDatabaseResponse>(() => new RemoveVariationFromSongDatabaseResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveVariationFromSongDatabaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseVariationReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationFromSongDatabaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationFromSongDatabaseResponse(RemoveVariationFromSongDatabaseResponse other) : this() {
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationFromSongDatabaseResponse Clone() {
      return new RemoveVariationFromSongDatabaseResponse(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::SeppoService.RemoveVariationFromSongDatabaseResponse.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SeppoService.RemoveVariationFromSongDatabaseResponse.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveVariationFromSongDatabaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveVariationFromSongDatabaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveVariationFromSongDatabaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::SeppoService.RemoveVariationFromSongDatabaseResponse.Types.State) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RemoveVariationFromSongDatabaseResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        [pbr::OriginalName("NOT_FOUND")] NotFound = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
