// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ew_song.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SeppoService {

  /// <summary>Holder for reflection information generated from ew_song.proto</summary>
  public static partial class EwSongReflection {

    #region Descriptor
    /// <summary>File descriptor for ew_song.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EwSongReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1ld19zb25nLnByb3RvEgxTZXBwb1NlcnZpY2UaDmV3X3ZlcnNlLnByb3Rv",
            "IqMBCgZFd1NvbmcSCgoCaWQYASABKA0SDQoFdGl0bGUYAiABKAkSDgoGYXV0",
            "aG9yGAMgASgJEhEKCWNvcHlyaWdodBgEIAEoCRIVCg1hZG1pbmlzdHJhdG9y",
            "GAUgASgJEhMKC2Rlc2NyaXB0aW9uGAYgASgJEgwKBHRhZ3MYByABKAkSDAoE",
            "dGV4dBgIIAEoCRITCgt2YXJpYXRpb25JZBgJIAEoDSI8ChNWYXJpYXRpb25J",
            "ZEV3U29uZ0lkEhAKCGV3U29uZ0lkGAEgASgNEhMKC3ZhcmlhdGlvbklkGAIg",
            "ASgNIjUKCU5ld1NvbmdJZBITCgtvbGRFd1NvbmdJZBgBIAEoDRITCgtuZXdF",
            "d1NvbmdJZBgCIAEoDSKdAQoWSW5zZXJ0RXdTb25nSWRzUmVxdWVzdBIVCg1l",
            "d0RhdGFiYXNlS2V5GAEgASgJEj8KFHZhcmlhdGlvbklkRXdTb25nSWRzGAIg",
            "AygLMiEuU2VwcG9TZXJ2aWNlLlZhcmlhdGlvbklkRXdTb25nSWQSKwoKbmV3",
            "U29uZ0lkcxgDIAMoCzIXLlNlcHBvU2VydmljZS5OZXdTb25nSWQiGQoXSW5z",
            "ZXJ0RXdTb25nSWRzUmVzcG9uc2UiXAoWQ2hhbmdlRXdTb25nSWRzUmVxdWVz",
            "dBIVCg1ld0RhdGFiYXNlS2V5GAEgASgJEisKCm5ld1NvbmdJZHMYAiADKAsy",
            "Fy5TZXBwb1NlcnZpY2UuTmV3U29uZ0lkIhkKF0NoYW5nZUV3U29uZ0lkc1Jl",
            "c3BvbnNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SeppoService.EwVerseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.EwSong), global::SeppoService.EwSong.Parser, new[]{ "Id", "Title", "Author", "Copyright", "Administrator", "Description", "Tags", "Text", "VariationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.VariationIdEwSongId), global::SeppoService.VariationIdEwSongId.Parser, new[]{ "EwSongId", "VariationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.NewSongId), global::SeppoService.NewSongId.Parser, new[]{ "OldEwSongId", "NewEwSongId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.InsertEwSongIdsRequest), global::SeppoService.InsertEwSongIdsRequest.Parser, new[]{ "EwDatabaseKey", "VariationIdEwSongIds", "NewSongIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.InsertEwSongIdsResponse), global::SeppoService.InsertEwSongIdsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.ChangeEwSongIdsRequest), global::SeppoService.ChangeEwSongIdsRequest.Parser, new[]{ "EwDatabaseKey", "NewSongIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.ChangeEwSongIdsResponse), global::SeppoService.ChangeEwSongIdsResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EwSong : pb::IMessage<EwSong> {
    private static readonly pb::MessageParser<EwSong> _parser = new pb::MessageParser<EwSong>(() => new EwSong());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EwSong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.EwSongReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EwSong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EwSong(EwSong other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      author_ = other.author_;
      copyright_ = other.copyright_;
      administrator_ = other.administrator_;
      description_ = other.description_;
      tags_ = other.tags_;
      text_ = other.text_;
      variationId_ = other.variationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EwSong Clone() {
      return new EwSong(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 3;
    private string author_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "copyright" field.</summary>
    public const int CopyrightFieldNumber = 4;
    private string copyright_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Copyright {
      get { return copyright_; }
      set {
        copyright_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "administrator" field.</summary>
    public const int AdministratorFieldNumber = 5;
    private string administrator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Administrator {
      get { return administrator_; }
      set {
        administrator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private string tags_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 8;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variationId" field.</summary>
    public const int VariationIdFieldNumber = 9;
    private uint variationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VariationId {
      get { return variationId_; }
      set {
        variationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EwSong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EwSong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (Author != other.Author) return false;
      if (Copyright != other.Copyright) return false;
      if (Administrator != other.Administrator) return false;
      if (Description != other.Description) return false;
      if (Tags != other.Tags) return false;
      if (Text != other.Text) return false;
      if (VariationId != other.VariationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (Copyright.Length != 0) hash ^= Copyright.GetHashCode();
      if (Administrator.Length != 0) hash ^= Administrator.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (VariationId != 0) hash ^= VariationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Author);
      }
      if (Copyright.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Copyright);
      }
      if (Administrator.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Administrator);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Tags);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Text);
      }
      if (VariationId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(VariationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (Copyright.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Copyright);
      }
      if (Administrator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Administrator);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Tags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (VariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VariationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EwSong other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.Copyright.Length != 0) {
        Copyright = other.Copyright;
      }
      if (other.Administrator.Length != 0) {
        Administrator = other.Administrator;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.VariationId != 0) {
        VariationId = other.VariationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Author = input.ReadString();
            break;
          }
          case 34: {
            Copyright = input.ReadString();
            break;
          }
          case 42: {
            Administrator = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            Tags = input.ReadString();
            break;
          }
          case 66: {
            Text = input.ReadString();
            break;
          }
          case 72: {
            VariationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VariationIdEwSongId : pb::IMessage<VariationIdEwSongId> {
    private static readonly pb::MessageParser<VariationIdEwSongId> _parser = new pb::MessageParser<VariationIdEwSongId>(() => new VariationIdEwSongId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariationIdEwSongId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.EwSongReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariationIdEwSongId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariationIdEwSongId(VariationIdEwSongId other) : this() {
      ewSongId_ = other.ewSongId_;
      variationId_ = other.variationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariationIdEwSongId Clone() {
      return new VariationIdEwSongId(this);
    }

    /// <summary>Field number for the "ewSongId" field.</summary>
    public const int EwSongIdFieldNumber = 1;
    private uint ewSongId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EwSongId {
      get { return ewSongId_; }
      set {
        ewSongId_ = value;
      }
    }

    /// <summary>Field number for the "variationId" field.</summary>
    public const int VariationIdFieldNumber = 2;
    private uint variationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VariationId {
      get { return variationId_; }
      set {
        variationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariationIdEwSongId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariationIdEwSongId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EwSongId != other.EwSongId) return false;
      if (VariationId != other.VariationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EwSongId != 0) hash ^= EwSongId.GetHashCode();
      if (VariationId != 0) hash ^= VariationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EwSongId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EwSongId);
      }
      if (VariationId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VariationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EwSongId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EwSongId);
      }
      if (VariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VariationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariationIdEwSongId other) {
      if (other == null) {
        return;
      }
      if (other.EwSongId != 0) {
        EwSongId = other.EwSongId;
      }
      if (other.VariationId != 0) {
        VariationId = other.VariationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EwSongId = input.ReadUInt32();
            break;
          }
          case 16: {
            VariationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewSongId : pb::IMessage<NewSongId> {
    private static readonly pb::MessageParser<NewSongId> _parser = new pb::MessageParser<NewSongId>(() => new NewSongId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewSongId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.EwSongReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewSongId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewSongId(NewSongId other) : this() {
      oldEwSongId_ = other.oldEwSongId_;
      newEwSongId_ = other.newEwSongId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewSongId Clone() {
      return new NewSongId(this);
    }

    /// <summary>Field number for the "oldEwSongId" field.</summary>
    public const int OldEwSongIdFieldNumber = 1;
    private uint oldEwSongId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldEwSongId {
      get { return oldEwSongId_; }
      set {
        oldEwSongId_ = value;
      }
    }

    /// <summary>Field number for the "newEwSongId" field.</summary>
    public const int NewEwSongIdFieldNumber = 2;
    private uint newEwSongId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewEwSongId {
      get { return newEwSongId_; }
      set {
        newEwSongId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewSongId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewSongId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OldEwSongId != other.OldEwSongId) return false;
      if (NewEwSongId != other.NewEwSongId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OldEwSongId != 0) hash ^= OldEwSongId.GetHashCode();
      if (NewEwSongId != 0) hash ^= NewEwSongId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldEwSongId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OldEwSongId);
      }
      if (NewEwSongId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NewEwSongId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldEwSongId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldEwSongId);
      }
      if (NewEwSongId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewEwSongId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewSongId other) {
      if (other == null) {
        return;
      }
      if (other.OldEwSongId != 0) {
        OldEwSongId = other.OldEwSongId;
      }
      if (other.NewEwSongId != 0) {
        NewEwSongId = other.NewEwSongId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OldEwSongId = input.ReadUInt32();
            break;
          }
          case 16: {
            NewEwSongId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertEwSongIdsRequest : pb::IMessage<InsertEwSongIdsRequest> {
    private static readonly pb::MessageParser<InsertEwSongIdsRequest> _parser = new pb::MessageParser<InsertEwSongIdsRequest>(() => new InsertEwSongIdsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertEwSongIdsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.EwSongReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertEwSongIdsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertEwSongIdsRequest(InsertEwSongIdsRequest other) : this() {
      ewDatabaseKey_ = other.ewDatabaseKey_;
      variationIdEwSongIds_ = other.variationIdEwSongIds_.Clone();
      newSongIds_ = other.newSongIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertEwSongIdsRequest Clone() {
      return new InsertEwSongIdsRequest(this);
    }

    /// <summary>Field number for the "ewDatabaseKey" field.</summary>
    public const int EwDatabaseKeyFieldNumber = 1;
    private string ewDatabaseKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EwDatabaseKey {
      get { return ewDatabaseKey_; }
      set {
        ewDatabaseKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variationIdEwSongIds" field.</summary>
    public const int VariationIdEwSongIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SeppoService.VariationIdEwSongId> _repeated_variationIdEwSongIds_codec
        = pb::FieldCodec.ForMessage(18, global::SeppoService.VariationIdEwSongId.Parser);
    private readonly pbc::RepeatedField<global::SeppoService.VariationIdEwSongId> variationIdEwSongIds_ = new pbc::RepeatedField<global::SeppoService.VariationIdEwSongId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SeppoService.VariationIdEwSongId> VariationIdEwSongIds {
      get { return variationIdEwSongIds_; }
    }

    /// <summary>Field number for the "newSongIds" field.</summary>
    public const int NewSongIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SeppoService.NewSongId> _repeated_newSongIds_codec
        = pb::FieldCodec.ForMessage(26, global::SeppoService.NewSongId.Parser);
    private readonly pbc::RepeatedField<global::SeppoService.NewSongId> newSongIds_ = new pbc::RepeatedField<global::SeppoService.NewSongId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SeppoService.NewSongId> NewSongIds {
      get { return newSongIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertEwSongIdsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertEwSongIdsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EwDatabaseKey != other.EwDatabaseKey) return false;
      if(!variationIdEwSongIds_.Equals(other.variationIdEwSongIds_)) return false;
      if(!newSongIds_.Equals(other.newSongIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EwDatabaseKey.Length != 0) hash ^= EwDatabaseKey.GetHashCode();
      hash ^= variationIdEwSongIds_.GetHashCode();
      hash ^= newSongIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EwDatabaseKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EwDatabaseKey);
      }
      variationIdEwSongIds_.WriteTo(output, _repeated_variationIdEwSongIds_codec);
      newSongIds_.WriteTo(output, _repeated_newSongIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EwDatabaseKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EwDatabaseKey);
      }
      size += variationIdEwSongIds_.CalculateSize(_repeated_variationIdEwSongIds_codec);
      size += newSongIds_.CalculateSize(_repeated_newSongIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertEwSongIdsRequest other) {
      if (other == null) {
        return;
      }
      if (other.EwDatabaseKey.Length != 0) {
        EwDatabaseKey = other.EwDatabaseKey;
      }
      variationIdEwSongIds_.Add(other.variationIdEwSongIds_);
      newSongIds_.Add(other.newSongIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EwDatabaseKey = input.ReadString();
            break;
          }
          case 18: {
            variationIdEwSongIds_.AddEntriesFrom(input, _repeated_variationIdEwSongIds_codec);
            break;
          }
          case 26: {
            newSongIds_.AddEntriesFrom(input, _repeated_newSongIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertEwSongIdsResponse : pb::IMessage<InsertEwSongIdsResponse> {
    private static readonly pb::MessageParser<InsertEwSongIdsResponse> _parser = new pb::MessageParser<InsertEwSongIdsResponse>(() => new InsertEwSongIdsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertEwSongIdsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.EwSongReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertEwSongIdsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertEwSongIdsResponse(InsertEwSongIdsResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertEwSongIdsResponse Clone() {
      return new InsertEwSongIdsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertEwSongIdsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertEwSongIdsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertEwSongIdsResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ChangeEwSongIdsRequest : pb::IMessage<ChangeEwSongIdsRequest> {
    private static readonly pb::MessageParser<ChangeEwSongIdsRequest> _parser = new pb::MessageParser<ChangeEwSongIdsRequest>(() => new ChangeEwSongIdsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeEwSongIdsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.EwSongReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEwSongIdsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEwSongIdsRequest(ChangeEwSongIdsRequest other) : this() {
      ewDatabaseKey_ = other.ewDatabaseKey_;
      newSongIds_ = other.newSongIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEwSongIdsRequest Clone() {
      return new ChangeEwSongIdsRequest(this);
    }

    /// <summary>Field number for the "ewDatabaseKey" field.</summary>
    public const int EwDatabaseKeyFieldNumber = 1;
    private string ewDatabaseKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EwDatabaseKey {
      get { return ewDatabaseKey_; }
      set {
        ewDatabaseKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newSongIds" field.</summary>
    public const int NewSongIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SeppoService.NewSongId> _repeated_newSongIds_codec
        = pb::FieldCodec.ForMessage(18, global::SeppoService.NewSongId.Parser);
    private readonly pbc::RepeatedField<global::SeppoService.NewSongId> newSongIds_ = new pbc::RepeatedField<global::SeppoService.NewSongId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SeppoService.NewSongId> NewSongIds {
      get { return newSongIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeEwSongIdsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeEwSongIdsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EwDatabaseKey != other.EwDatabaseKey) return false;
      if(!newSongIds_.Equals(other.newSongIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EwDatabaseKey.Length != 0) hash ^= EwDatabaseKey.GetHashCode();
      hash ^= newSongIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EwDatabaseKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EwDatabaseKey);
      }
      newSongIds_.WriteTo(output, _repeated_newSongIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EwDatabaseKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EwDatabaseKey);
      }
      size += newSongIds_.CalculateSize(_repeated_newSongIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeEwSongIdsRequest other) {
      if (other == null) {
        return;
      }
      if (other.EwDatabaseKey.Length != 0) {
        EwDatabaseKey = other.EwDatabaseKey;
      }
      newSongIds_.Add(other.newSongIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EwDatabaseKey = input.ReadString();
            break;
          }
          case 18: {
            newSongIds_.AddEntriesFrom(input, _repeated_newSongIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeEwSongIdsResponse : pb::IMessage<ChangeEwSongIdsResponse> {
    private static readonly pb::MessageParser<ChangeEwSongIdsResponse> _parser = new pb::MessageParser<ChangeEwSongIdsResponse>(() => new ChangeEwSongIdsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeEwSongIdsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.EwSongReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEwSongIdsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEwSongIdsResponse(ChangeEwSongIdsResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeEwSongIdsResponse Clone() {
      return new ChangeEwSongIdsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeEwSongIdsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeEwSongIdsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeEwSongIdsResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
