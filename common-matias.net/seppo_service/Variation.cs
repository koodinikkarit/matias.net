// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: variation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SeppoService {

  /// <summary>Holder for reflection information generated from variation.proto</summary>
  public static partial class VariationReflection {

    #region Descriptor
    /// <summary>File descriptor for variation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VariationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg92YXJpYXRpb24ucHJvdG8SDFNlcHBvU2VydmljZSJUCglWYXJpYXRpb24S",
            "CgoCaWQYASABKA0SDAoEbmFtZRgCIAEoCRIOCgZzb25nSWQYAyABKA0SDAoE",
            "dGV4dBgEIAEoCRIPCgd2ZXJzaW9uGAUgASgEIjQKFkNyZWF0ZVZhcmlhdGlv",
            "blJlcXVlc3QSDAoEbmFtZRgBIAEoCRIMCgR0ZXh0GAIgASgJIkUKF0NyZWF0",
            "ZVZhcmlhdGlvblJlc3BvbnNlEioKCXZhcmlhdGlvbhgBIAEoCzIXLlNlcHBv",
            "U2VydmljZS5WYXJpYXRpb24iaAoURWRpdFZhcmlhdGlvblJlcXVlc3QSEwoL",
            "dmFyaWF0aW9uSWQYASABKA0SDAoEbmFtZRgCIAEoCRIMCgR0ZXh0GAMgASgJ",
            "Eg4KBnNvbmdJZBgEIAEoDRIPCgd2ZXJzaW9uGAUgASgEIkMKFUVkaXRWYXJp",
            "YXRpb25SZXNwb25zZRIqCgl2YXJpYXRpb24YASABKAsyFy5TZXBwb1NlcnZp",
            "Y2UuVmFyaWF0aW9uIi0KFlJlbW92ZVZhcmlhdGlvblJlcXVlc3QSEwoLdmFy",
            "aWF0aW9uSWQYASABKA0iGQoXUmVtb3ZlVmFyaWF0aW9uUmVzcG9uc2UiMQoZ",
            "RmV0Y2hWYXJpYXRpb25CeUlkUmVxdWVzdBIUCgx2YXJpYXRpb25JZHMYASAD",
            "KA0iSQoaRmV0Y2hWYXJpYXRpb25CeUlkUmVzcG9uc2USKwoKdmFyaWF0aW9u",
            "cxgBIAMoCzIXLlNlcHBvU2VydmljZS5WYXJpYXRpb24iYwoXU2VhcmNoVmFy",
            "aWF0aW9uc1JlcXVlc3QSEgoKc2VhcmNoV29yZBgBIAEoCRIWCg5zb25nRGF0",
            "YWJhc2VJZBgCIAEoDRIcChRzb25nRGF0YWJhc2VGaWx0ZXJJZBgDIAEoDSJH",
            "ChhTZWFyY2hWYXJpYXRpb25zUmVzcG9uc2USKwoKdmFyaWF0aW9ucxgBIAMo",
            "CzIXLlNlcHBvU2VydmljZS5WYXJpYXRpb25iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.Variation), global::SeppoService.Variation.Parser, new[]{ "Id", "Name", "SongId", "Text", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.CreateVariationRequest), global::SeppoService.CreateVariationRequest.Parser, new[]{ "Name", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.CreateVariationResponse), global::SeppoService.CreateVariationResponse.Parser, new[]{ "Variation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.EditVariationRequest), global::SeppoService.EditVariationRequest.Parser, new[]{ "VariationId", "Name", "Text", "SongId", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.EditVariationResponse), global::SeppoService.EditVariationResponse.Parser, new[]{ "Variation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.RemoveVariationRequest), global::SeppoService.RemoveVariationRequest.Parser, new[]{ "VariationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.RemoveVariationResponse), global::SeppoService.RemoveVariationResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.FetchVariationByIdRequest), global::SeppoService.FetchVariationByIdRequest.Parser, new[]{ "VariationIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.FetchVariationByIdResponse), global::SeppoService.FetchVariationByIdResponse.Parser, new[]{ "Variations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.SearchVariationsRequest), global::SeppoService.SearchVariationsRequest.Parser, new[]{ "SearchWord", "SongDatabaseId", "SongDatabaseFilterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.SearchVariationsResponse), global::SeppoService.SearchVariationsResponse.Parser, new[]{ "Variations" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Variation : pb::IMessage<Variation> {
    private static readonly pb::MessageParser<Variation> _parser = new pb::MessageParser<Variation>(() => new Variation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variation(Variation other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      songId_ = other.songId_;
      text_ = other.text_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variation Clone() {
      return new Variation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "songId" field.</summary>
    public const int SongIdFieldNumber = 3;
    private uint songId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongId {
      get { return songId_; }
      set {
        songId_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (SongId != other.SongId) return false;
      if (Text != other.Text) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SongId != 0) hash ^= SongId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Version != 0UL) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SongId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SongId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (Version != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SongId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SongId != 0) {
        SongId = other.SongId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            SongId = input.ReadUInt32();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
          case 40: {
            Version = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateVariationRequest : pb::IMessage<CreateVariationRequest> {
    private static readonly pb::MessageParser<CreateVariationRequest> _parser = new pb::MessageParser<CreateVariationRequest>(() => new CreateVariationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateVariationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariationRequest(CreateVariationRequest other) : this() {
      name_ = other.name_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariationRequest Clone() {
      return new CreateVariationRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateVariationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateVariationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateVariationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateVariationResponse : pb::IMessage<CreateVariationResponse> {
    private static readonly pb::MessageParser<CreateVariationResponse> _parser = new pb::MessageParser<CreateVariationResponse>(() => new CreateVariationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateVariationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariationResponse(CreateVariationResponse other) : this() {
      Variation = other.variation_ != null ? other.Variation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateVariationResponse Clone() {
      return new CreateVariationResponse(this);
    }

    /// <summary>Field number for the "variation" field.</summary>
    public const int VariationFieldNumber = 1;
    private global::SeppoService.Variation variation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SeppoService.Variation Variation {
      get { return variation_; }
      set {
        variation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateVariationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateVariationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Variation, other.Variation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (variation_ != null) hash ^= Variation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (variation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Variation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (variation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateVariationResponse other) {
      if (other == null) {
        return;
      }
      if (other.variation_ != null) {
        if (variation_ == null) {
          variation_ = new global::SeppoService.Variation();
        }
        Variation.MergeFrom(other.Variation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (variation_ == null) {
              variation_ = new global::SeppoService.Variation();
            }
            input.ReadMessage(variation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditVariationRequest : pb::IMessage<EditVariationRequest> {
    private static readonly pb::MessageParser<EditVariationRequest> _parser = new pb::MessageParser<EditVariationRequest>(() => new EditVariationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditVariationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditVariationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditVariationRequest(EditVariationRequest other) : this() {
      variationId_ = other.variationId_;
      name_ = other.name_;
      text_ = other.text_;
      songId_ = other.songId_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditVariationRequest Clone() {
      return new EditVariationRequest(this);
    }

    /// <summary>Field number for the "variationId" field.</summary>
    public const int VariationIdFieldNumber = 1;
    private uint variationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VariationId {
      get { return variationId_; }
      set {
        variationId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "songId" field.</summary>
    public const int SongIdFieldNumber = 4;
    private uint songId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongId {
      get { return songId_; }
      set {
        songId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditVariationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditVariationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariationId != other.VariationId) return false;
      if (Name != other.Name) return false;
      if (Text != other.Text) return false;
      if (SongId != other.SongId) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariationId != 0) hash ^= VariationId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (SongId != 0) hash ^= SongId.GetHashCode();
      if (Version != 0UL) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariationId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VariationId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (SongId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SongId);
      }
      if (Version != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VariationId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (SongId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongId);
      }
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditVariationRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariationId != 0) {
        VariationId = other.VariationId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.SongId != 0) {
        SongId = other.SongId;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VariationId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 32: {
            SongId = input.ReadUInt32();
            break;
          }
          case 40: {
            Version = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditVariationResponse : pb::IMessage<EditVariationResponse> {
    private static readonly pb::MessageParser<EditVariationResponse> _parser = new pb::MessageParser<EditVariationResponse>(() => new EditVariationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditVariationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditVariationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditVariationResponse(EditVariationResponse other) : this() {
      Variation = other.variation_ != null ? other.Variation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditVariationResponse Clone() {
      return new EditVariationResponse(this);
    }

    /// <summary>Field number for the "variation" field.</summary>
    public const int VariationFieldNumber = 1;
    private global::SeppoService.Variation variation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SeppoService.Variation Variation {
      get { return variation_; }
      set {
        variation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditVariationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditVariationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Variation, other.Variation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (variation_ != null) hash ^= Variation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (variation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Variation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (variation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditVariationResponse other) {
      if (other == null) {
        return;
      }
      if (other.variation_ != null) {
        if (variation_ == null) {
          variation_ = new global::SeppoService.Variation();
        }
        Variation.MergeFrom(other.Variation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (variation_ == null) {
              variation_ = new global::SeppoService.Variation();
            }
            input.ReadMessage(variation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveVariationRequest : pb::IMessage<RemoveVariationRequest> {
    private static readonly pb::MessageParser<RemoveVariationRequest> _parser = new pb::MessageParser<RemoveVariationRequest>(() => new RemoveVariationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveVariationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationRequest(RemoveVariationRequest other) : this() {
      variationId_ = other.variationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationRequest Clone() {
      return new RemoveVariationRequest(this);
    }

    /// <summary>Field number for the "variationId" field.</summary>
    public const int VariationIdFieldNumber = 1;
    private uint variationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VariationId {
      get { return variationId_; }
      set {
        variationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveVariationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveVariationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VariationId != other.VariationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VariationId != 0) hash ^= VariationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VariationId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VariationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VariationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveVariationRequest other) {
      if (other == null) {
        return;
      }
      if (other.VariationId != 0) {
        VariationId = other.VariationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VariationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveVariationResponse : pb::IMessage<RemoveVariationResponse> {
    private static readonly pb::MessageParser<RemoveVariationResponse> _parser = new pb::MessageParser<RemoveVariationResponse>(() => new RemoveVariationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveVariationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationResponse(RemoveVariationResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVariationResponse Clone() {
      return new RemoveVariationResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveVariationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveVariationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveVariationResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class FetchVariationByIdRequest : pb::IMessage<FetchVariationByIdRequest> {
    private static readonly pb::MessageParser<FetchVariationByIdRequest> _parser = new pb::MessageParser<FetchVariationByIdRequest>(() => new FetchVariationByIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchVariationByIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationByIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationByIdRequest(FetchVariationByIdRequest other) : this() {
      variationIds_ = other.variationIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationByIdRequest Clone() {
      return new FetchVariationByIdRequest(this);
    }

    /// <summary>Field number for the "variationIds" field.</summary>
    public const int VariationIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_variationIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> variationIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> VariationIds {
      get { return variationIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchVariationByIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchVariationByIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variationIds_.Equals(other.variationIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variationIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variationIds_.WriteTo(output, _repeated_variationIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variationIds_.CalculateSize(_repeated_variationIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchVariationByIdRequest other) {
      if (other == null) {
        return;
      }
      variationIds_.Add(other.variationIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            variationIds_.AddEntriesFrom(input, _repeated_variationIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FetchVariationByIdResponse : pb::IMessage<FetchVariationByIdResponse> {
    private static readonly pb::MessageParser<FetchVariationByIdResponse> _parser = new pb::MessageParser<FetchVariationByIdResponse>(() => new FetchVariationByIdResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchVariationByIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationByIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationByIdResponse(FetchVariationByIdResponse other) : this() {
      variations_ = other.variations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchVariationByIdResponse Clone() {
      return new FetchVariationByIdResponse(this);
    }

    /// <summary>Field number for the "variations" field.</summary>
    public const int VariationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SeppoService.Variation> _repeated_variations_codec
        = pb::FieldCodec.ForMessage(10, global::SeppoService.Variation.Parser);
    private readonly pbc::RepeatedField<global::SeppoService.Variation> variations_ = new pbc::RepeatedField<global::SeppoService.Variation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SeppoService.Variation> Variations {
      get { return variations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchVariationByIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchVariationByIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variations_.Equals(other.variations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variations_.WriteTo(output, _repeated_variations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variations_.CalculateSize(_repeated_variations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchVariationByIdResponse other) {
      if (other == null) {
        return;
      }
      variations_.Add(other.variations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            variations_.AddEntriesFrom(input, _repeated_variations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchVariationsRequest : pb::IMessage<SearchVariationsRequest> {
    private static readonly pb::MessageParser<SearchVariationsRequest> _parser = new pb::MessageParser<SearchVariationsRequest>(() => new SearchVariationsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchVariationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariationsRequest(SearchVariationsRequest other) : this() {
      searchWord_ = other.searchWord_;
      songDatabaseId_ = other.songDatabaseId_;
      songDatabaseFilterId_ = other.songDatabaseFilterId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariationsRequest Clone() {
      return new SearchVariationsRequest(this);
    }

    /// <summary>Field number for the "searchWord" field.</summary>
    public const int SearchWordFieldNumber = 1;
    private string searchWord_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchWord {
      get { return searchWord_; }
      set {
        searchWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "songDatabaseId" field.</summary>
    public const int SongDatabaseIdFieldNumber = 2;
    private uint songDatabaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongDatabaseId {
      get { return songDatabaseId_; }
      set {
        songDatabaseId_ = value;
      }
    }

    /// <summary>Field number for the "songDatabaseFilterId" field.</summary>
    public const int SongDatabaseFilterIdFieldNumber = 3;
    private uint songDatabaseFilterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongDatabaseFilterId {
      get { return songDatabaseFilterId_; }
      set {
        songDatabaseFilterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchVariationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchVariationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchWord != other.SearchWord) return false;
      if (SongDatabaseId != other.SongDatabaseId) return false;
      if (SongDatabaseFilterId != other.SongDatabaseFilterId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchWord.Length != 0) hash ^= SearchWord.GetHashCode();
      if (SongDatabaseId != 0) hash ^= SongDatabaseId.GetHashCode();
      if (SongDatabaseFilterId != 0) hash ^= SongDatabaseFilterId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchWord.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SearchWord);
      }
      if (SongDatabaseId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SongDatabaseId);
      }
      if (SongDatabaseFilterId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SongDatabaseFilterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchWord);
      }
      if (SongDatabaseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongDatabaseId);
      }
      if (SongDatabaseFilterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongDatabaseFilterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchVariationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchWord.Length != 0) {
        SearchWord = other.SearchWord;
      }
      if (other.SongDatabaseId != 0) {
        SongDatabaseId = other.SongDatabaseId;
      }
      if (other.SongDatabaseFilterId != 0) {
        SongDatabaseFilterId = other.SongDatabaseFilterId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SearchWord = input.ReadString();
            break;
          }
          case 16: {
            SongDatabaseId = input.ReadUInt32();
            break;
          }
          case 24: {
            SongDatabaseFilterId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchVariationsResponse : pb::IMessage<SearchVariationsResponse> {
    private static readonly pb::MessageParser<SearchVariationsResponse> _parser = new pb::MessageParser<SearchVariationsResponse>(() => new SearchVariationsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchVariationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.VariationReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariationsResponse(SearchVariationsResponse other) : this() {
      variations_ = other.variations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchVariationsResponse Clone() {
      return new SearchVariationsResponse(this);
    }

    /// <summary>Field number for the "variations" field.</summary>
    public const int VariationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SeppoService.Variation> _repeated_variations_codec
        = pb::FieldCodec.ForMessage(10, global::SeppoService.Variation.Parser);
    private readonly pbc::RepeatedField<global::SeppoService.Variation> variations_ = new pbc::RepeatedField<global::SeppoService.Variation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SeppoService.Variation> Variations {
      get { return variations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchVariationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchVariationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variations_.Equals(other.variations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variations_.WriteTo(output, _repeated_variations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variations_.CalculateSize(_repeated_variations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchVariationsResponse other) {
      if (other == null) {
        return;
      }
      variations_.Add(other.variations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            variations_.AddEntriesFrom(input, _repeated_variations_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
