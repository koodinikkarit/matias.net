// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: song_database.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SeppoService {

  /// <summary>Holder for reflection information generated from song_database.proto</summary>
  public static partial class SongDatabaseReflection {

    #region Descriptor
    /// <summary>File descriptor for song_database.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SongDatabaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNzb25nX2RhdGFiYXNlLnByb3RvEgxTZXBwb1NlcnZpY2UaHXNvbmdfZGF0",
            "YWJhc2VfdmFyaWF0aW9uLnByb3RvIjkKDFNvbmdEYXRhYmFzZRIKCgJpZBgB",
            "IAEoDRIMCgRuYW1lGAIgASgJEg8KB3ZlcnNpb24YAyABKAQiTAoQU29uZ0Rh",
            "dGFiYXNlRWRnZRIoCgRub2RlGAEgASgLMhouU2VwcG9TZXJ2aWNlLlNvbmdE",
            "YXRhYmFzZRIOCgZjdXJzb3IYAiABKA0iXAoXU29uZ0RhdGFiYXNlc0Nvbm5l",
            "Y3Rpb24SLQoFZWRnZXMYASADKAsyHi5TZXBwb1NlcnZpY2UuU29uZ0RhdGFi",
            "YXNlRWRnZRISCgp0b3RhbENvdW50GAMgASgNImsKGUZldGNoU29uZ0RhdGFi",
            "YXNlc1JlcXVlc3QSDQoFYWZ0ZXIYASABKA0SDgoGYmVmb3JlGAIgASgNEg0K",
            "BWZpcnN0GAMgASgNEgwKBGxhc3QYBCABKA0SEgoKc2VhcmNoV29yZBgFIAEo",
            "CSI3ChxGZXRjaFNvbmdEYXRhYmFzZUJ5SWRSZXF1ZXN0EhcKD3NvbmdEYXRh",
            "YmFzZUlkcxgBIAMoDSJSCh1GZXRjaFNvbmdEYXRhYmFzZUJ5SWRSZXNwb25z",
            "ZRIxCg1zb25nRGF0YWJhc2VzGAEgAygLMhouU2VwcG9TZXJ2aWNlLlNvbmdE",
            "YXRhYmFzZSIpChlDcmVhdGVTb25nRGF0YWJhc2VSZXF1ZXN0EgwKBG5hbWUY",
            "ASABKAkiTgoaQ3JlYXRlU29uZ0RhdGFiYXNlUmVzcG9uc2USMAoMc29uZ0Rh",
            "dGFiYXNlGAEgASgLMhouU2VwcG9TZXJ2aWNlLlNvbmdEYXRhYmFzZSI/ChdF",
            "ZGl0U29uZ0RhdGFiYXNlUmVxdWVzdBIWCg5zb25nRGF0YWJhc2VJZBgBIAEo",
            "DRIMCgRuYW1lGAIgASgJIkwKGEVkaXRTb25nRGF0YWJhc2VSZXNwb25zZRIw",
            "Cgxzb25nRGF0YWJhc2UYASABKAsyGi5TZXBwb1NlcnZpY2UuU29uZ0RhdGFi",
            "YXNlIjMKGVJlbW92ZVNvbmdEYXRhYmFzZVJlcXVlc3QSFgoOc29uZ0RhdGFi",
            "YXNlSWQYASABKA0iHAoaUmVtb3ZlU29uZ0RhdGFiYXNlUmVzcG9uc2ViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SeppoService.SongDatabaseVariationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.SongDatabase), global::SeppoService.SongDatabase.Parser, new[]{ "Id", "Name", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.SongDatabaseEdge), global::SeppoService.SongDatabaseEdge.Parser, new[]{ "Node", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.SongDatabasesConnection), global::SeppoService.SongDatabasesConnection.Parser, new[]{ "Edges", "TotalCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.FetchSongDatabasesRequest), global::SeppoService.FetchSongDatabasesRequest.Parser, new[]{ "After", "Before", "First", "Last", "SearchWord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.FetchSongDatabaseByIdRequest), global::SeppoService.FetchSongDatabaseByIdRequest.Parser, new[]{ "SongDatabaseIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.FetchSongDatabaseByIdResponse), global::SeppoService.FetchSongDatabaseByIdResponse.Parser, new[]{ "SongDatabases" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.CreateSongDatabaseRequest), global::SeppoService.CreateSongDatabaseRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.CreateSongDatabaseResponse), global::SeppoService.CreateSongDatabaseResponse.Parser, new[]{ "SongDatabase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.EditSongDatabaseRequest), global::SeppoService.EditSongDatabaseRequest.Parser, new[]{ "SongDatabaseId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.EditSongDatabaseResponse), global::SeppoService.EditSongDatabaseResponse.Parser, new[]{ "SongDatabase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.RemoveSongDatabaseRequest), global::SeppoService.RemoveSongDatabaseRequest.Parser, new[]{ "SongDatabaseId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SeppoService.RemoveSongDatabaseResponse), global::SeppoService.RemoveSongDatabaseResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SongDatabase : pb::IMessage<SongDatabase> {
    private static readonly pb::MessageParser<SongDatabase> _parser = new pb::MessageParser<SongDatabase>(() => new SongDatabase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SongDatabase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabase(SongDatabase other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabase Clone() {
      return new SongDatabase(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SongDatabase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SongDatabase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Version != 0UL) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Version != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SongDatabase other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SongDatabaseEdge : pb::IMessage<SongDatabaseEdge> {
    private static readonly pb::MessageParser<SongDatabaseEdge> _parser = new pb::MessageParser<SongDatabaseEdge>(() => new SongDatabaseEdge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SongDatabaseEdge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabaseEdge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabaseEdge(SongDatabaseEdge other) : this() {
      Node = other.node_ != null ? other.Node.Clone() : null;
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabaseEdge Clone() {
      return new SongDatabaseEdge(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::SeppoService.SongDatabase node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SeppoService.SongDatabase Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private uint cursor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cursor {
      get { return cursor_; }
      set {
        cursor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SongDatabaseEdge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SongDatabaseEdge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (Cursor != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (Cursor != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (Cursor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SongDatabaseEdge other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::SeppoService.SongDatabase();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.Cursor != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (node_ == null) {
              node_ = new global::SeppoService.SongDatabase();
            }
            input.ReadMessage(node_);
            break;
          }
          case 16: {
            Cursor = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SongDatabasesConnection : pb::IMessage<SongDatabasesConnection> {
    private static readonly pb::MessageParser<SongDatabasesConnection> _parser = new pb::MessageParser<SongDatabasesConnection>(() => new SongDatabasesConnection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SongDatabasesConnection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabasesConnection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabasesConnection(SongDatabasesConnection other) : this() {
      edges_ = other.edges_.Clone();
      totalCount_ = other.totalCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongDatabasesConnection Clone() {
      return new SongDatabasesConnection(this);
    }

    /// <summary>Field number for the "edges" field.</summary>
    public const int EdgesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SeppoService.SongDatabaseEdge> _repeated_edges_codec
        = pb::FieldCodec.ForMessage(10, global::SeppoService.SongDatabaseEdge.Parser);
    private readonly pbc::RepeatedField<global::SeppoService.SongDatabaseEdge> edges_ = new pbc::RepeatedField<global::SeppoService.SongDatabaseEdge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SeppoService.SongDatabaseEdge> Edges {
      get { return edges_; }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 3;
    private uint totalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SongDatabasesConnection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SongDatabasesConnection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!edges_.Equals(other.edges_)) return false;
      if (TotalCount != other.TotalCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= edges_.GetHashCode();
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      edges_.WriteTo(output, _repeated_edges_codec);
      if (TotalCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += edges_.CalculateSize(_repeated_edges_codec);
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SongDatabasesConnection other) {
      if (other == null) {
        return;
      }
      edges_.Add(other.edges_);
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            edges_.AddEntriesFrom(input, _repeated_edges_codec);
            break;
          }
          case 24: {
            TotalCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FetchSongDatabasesRequest : pb::IMessage<FetchSongDatabasesRequest> {
    private static readonly pb::MessageParser<FetchSongDatabasesRequest> _parser = new pb::MessageParser<FetchSongDatabasesRequest>(() => new FetchSongDatabasesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchSongDatabasesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchSongDatabasesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchSongDatabasesRequest(FetchSongDatabasesRequest other) : this() {
      after_ = other.after_;
      before_ = other.before_;
      first_ = other.first_;
      last_ = other.last_;
      searchWord_ = other.searchWord_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchSongDatabasesRequest Clone() {
      return new FetchSongDatabasesRequest(this);
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 1;
    private uint after_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint After {
      get { return after_; }
      set {
        after_ = value;
      }
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 2;
    private uint before_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Before {
      get { return before_; }
      set {
        before_ = value;
      }
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 3;
    private uint first_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    /// <summary>Field number for the "last" field.</summary>
    public const int LastFieldNumber = 4;
    private uint last_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Last {
      get { return last_; }
      set {
        last_ = value;
      }
    }

    /// <summary>Field number for the "searchWord" field.</summary>
    public const int SearchWordFieldNumber = 5;
    private string searchWord_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchWord {
      get { return searchWord_; }
      set {
        searchWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchSongDatabasesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchSongDatabasesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (After != other.After) return false;
      if (Before != other.Before) return false;
      if (First != other.First) return false;
      if (Last != other.Last) return false;
      if (SearchWord != other.SearchWord) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (After != 0) hash ^= After.GetHashCode();
      if (Before != 0) hash ^= Before.GetHashCode();
      if (First != 0) hash ^= First.GetHashCode();
      if (Last != 0) hash ^= Last.GetHashCode();
      if (SearchWord.Length != 0) hash ^= SearchWord.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (After != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(After);
      }
      if (Before != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Before);
      }
      if (First != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(First);
      }
      if (Last != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Last);
      }
      if (SearchWord.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SearchWord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (After != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(After);
      }
      if (Before != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Before);
      }
      if (First != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(First);
      }
      if (Last != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Last);
      }
      if (SearchWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchWord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchSongDatabasesRequest other) {
      if (other == null) {
        return;
      }
      if (other.After != 0) {
        After = other.After;
      }
      if (other.Before != 0) {
        Before = other.Before;
      }
      if (other.First != 0) {
        First = other.First;
      }
      if (other.Last != 0) {
        Last = other.Last;
      }
      if (other.SearchWord.Length != 0) {
        SearchWord = other.SearchWord;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            After = input.ReadUInt32();
            break;
          }
          case 16: {
            Before = input.ReadUInt32();
            break;
          }
          case 24: {
            First = input.ReadUInt32();
            break;
          }
          case 32: {
            Last = input.ReadUInt32();
            break;
          }
          case 42: {
            SearchWord = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FetchSongDatabaseByIdRequest : pb::IMessage<FetchSongDatabaseByIdRequest> {
    private static readonly pb::MessageParser<FetchSongDatabaseByIdRequest> _parser = new pb::MessageParser<FetchSongDatabaseByIdRequest>(() => new FetchSongDatabaseByIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchSongDatabaseByIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchSongDatabaseByIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchSongDatabaseByIdRequest(FetchSongDatabaseByIdRequest other) : this() {
      songDatabaseIds_ = other.songDatabaseIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchSongDatabaseByIdRequest Clone() {
      return new FetchSongDatabaseByIdRequest(this);
    }

    /// <summary>Field number for the "songDatabaseIds" field.</summary>
    public const int SongDatabaseIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_songDatabaseIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> songDatabaseIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SongDatabaseIds {
      get { return songDatabaseIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchSongDatabaseByIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchSongDatabaseByIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!songDatabaseIds_.Equals(other.songDatabaseIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= songDatabaseIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      songDatabaseIds_.WriteTo(output, _repeated_songDatabaseIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += songDatabaseIds_.CalculateSize(_repeated_songDatabaseIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchSongDatabaseByIdRequest other) {
      if (other == null) {
        return;
      }
      songDatabaseIds_.Add(other.songDatabaseIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            songDatabaseIds_.AddEntriesFrom(input, _repeated_songDatabaseIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FetchSongDatabaseByIdResponse : pb::IMessage<FetchSongDatabaseByIdResponse> {
    private static readonly pb::MessageParser<FetchSongDatabaseByIdResponse> _parser = new pb::MessageParser<FetchSongDatabaseByIdResponse>(() => new FetchSongDatabaseByIdResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchSongDatabaseByIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchSongDatabaseByIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchSongDatabaseByIdResponse(FetchSongDatabaseByIdResponse other) : this() {
      songDatabases_ = other.songDatabases_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchSongDatabaseByIdResponse Clone() {
      return new FetchSongDatabaseByIdResponse(this);
    }

    /// <summary>Field number for the "songDatabases" field.</summary>
    public const int SongDatabasesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SeppoService.SongDatabase> _repeated_songDatabases_codec
        = pb::FieldCodec.ForMessage(10, global::SeppoService.SongDatabase.Parser);
    private readonly pbc::RepeatedField<global::SeppoService.SongDatabase> songDatabases_ = new pbc::RepeatedField<global::SeppoService.SongDatabase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SeppoService.SongDatabase> SongDatabases {
      get { return songDatabases_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchSongDatabaseByIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchSongDatabaseByIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!songDatabases_.Equals(other.songDatabases_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= songDatabases_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      songDatabases_.WriteTo(output, _repeated_songDatabases_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += songDatabases_.CalculateSize(_repeated_songDatabases_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchSongDatabaseByIdResponse other) {
      if (other == null) {
        return;
      }
      songDatabases_.Add(other.songDatabases_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            songDatabases_.AddEntriesFrom(input, _repeated_songDatabases_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateSongDatabaseRequest : pb::IMessage<CreateSongDatabaseRequest> {
    private static readonly pb::MessageParser<CreateSongDatabaseRequest> _parser = new pb::MessageParser<CreateSongDatabaseRequest>(() => new CreateSongDatabaseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSongDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSongDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSongDatabaseRequest(CreateSongDatabaseRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSongDatabaseRequest Clone() {
      return new CreateSongDatabaseRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSongDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSongDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSongDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateSongDatabaseResponse : pb::IMessage<CreateSongDatabaseResponse> {
    private static readonly pb::MessageParser<CreateSongDatabaseResponse> _parser = new pb::MessageParser<CreateSongDatabaseResponse>(() => new CreateSongDatabaseResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSongDatabaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSongDatabaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSongDatabaseResponse(CreateSongDatabaseResponse other) : this() {
      SongDatabase = other.songDatabase_ != null ? other.SongDatabase.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSongDatabaseResponse Clone() {
      return new CreateSongDatabaseResponse(this);
    }

    /// <summary>Field number for the "songDatabase" field.</summary>
    public const int SongDatabaseFieldNumber = 1;
    private global::SeppoService.SongDatabase songDatabase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SeppoService.SongDatabase SongDatabase {
      get { return songDatabase_; }
      set {
        songDatabase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSongDatabaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSongDatabaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SongDatabase, other.SongDatabase)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (songDatabase_ != null) hash ^= SongDatabase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (songDatabase_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SongDatabase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (songDatabase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SongDatabase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSongDatabaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.songDatabase_ != null) {
        if (songDatabase_ == null) {
          songDatabase_ = new global::SeppoService.SongDatabase();
        }
        SongDatabase.MergeFrom(other.SongDatabase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (songDatabase_ == null) {
              songDatabase_ = new global::SeppoService.SongDatabase();
            }
            input.ReadMessage(songDatabase_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditSongDatabaseRequest : pb::IMessage<EditSongDatabaseRequest> {
    private static readonly pb::MessageParser<EditSongDatabaseRequest> _parser = new pb::MessageParser<EditSongDatabaseRequest>(() => new EditSongDatabaseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditSongDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditSongDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditSongDatabaseRequest(EditSongDatabaseRequest other) : this() {
      songDatabaseId_ = other.songDatabaseId_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditSongDatabaseRequest Clone() {
      return new EditSongDatabaseRequest(this);
    }

    /// <summary>Field number for the "songDatabaseId" field.</summary>
    public const int SongDatabaseIdFieldNumber = 1;
    private uint songDatabaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongDatabaseId {
      get { return songDatabaseId_; }
      set {
        songDatabaseId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditSongDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditSongDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SongDatabaseId != other.SongDatabaseId) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SongDatabaseId != 0) hash ^= SongDatabaseId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SongDatabaseId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SongDatabaseId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SongDatabaseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongDatabaseId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditSongDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.SongDatabaseId != 0) {
        SongDatabaseId = other.SongDatabaseId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SongDatabaseId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditSongDatabaseResponse : pb::IMessage<EditSongDatabaseResponse> {
    private static readonly pb::MessageParser<EditSongDatabaseResponse> _parser = new pb::MessageParser<EditSongDatabaseResponse>(() => new EditSongDatabaseResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditSongDatabaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditSongDatabaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditSongDatabaseResponse(EditSongDatabaseResponse other) : this() {
      SongDatabase = other.songDatabase_ != null ? other.SongDatabase.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditSongDatabaseResponse Clone() {
      return new EditSongDatabaseResponse(this);
    }

    /// <summary>Field number for the "songDatabase" field.</summary>
    public const int SongDatabaseFieldNumber = 1;
    private global::SeppoService.SongDatabase songDatabase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SeppoService.SongDatabase SongDatabase {
      get { return songDatabase_; }
      set {
        songDatabase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditSongDatabaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditSongDatabaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SongDatabase, other.SongDatabase)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (songDatabase_ != null) hash ^= SongDatabase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (songDatabase_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SongDatabase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (songDatabase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SongDatabase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditSongDatabaseResponse other) {
      if (other == null) {
        return;
      }
      if (other.songDatabase_ != null) {
        if (songDatabase_ == null) {
          songDatabase_ = new global::SeppoService.SongDatabase();
        }
        SongDatabase.MergeFrom(other.SongDatabase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (songDatabase_ == null) {
              songDatabase_ = new global::SeppoService.SongDatabase();
            }
            input.ReadMessage(songDatabase_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveSongDatabaseRequest : pb::IMessage<RemoveSongDatabaseRequest> {
    private static readonly pb::MessageParser<RemoveSongDatabaseRequest> _parser = new pb::MessageParser<RemoveSongDatabaseRequest>(() => new RemoveSongDatabaseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveSongDatabaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongDatabaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongDatabaseRequest(RemoveSongDatabaseRequest other) : this() {
      songDatabaseId_ = other.songDatabaseId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongDatabaseRequest Clone() {
      return new RemoveSongDatabaseRequest(this);
    }

    /// <summary>Field number for the "songDatabaseId" field.</summary>
    public const int SongDatabaseIdFieldNumber = 1;
    private uint songDatabaseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SongDatabaseId {
      get { return songDatabaseId_; }
      set {
        songDatabaseId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveSongDatabaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveSongDatabaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SongDatabaseId != other.SongDatabaseId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SongDatabaseId != 0) hash ^= SongDatabaseId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SongDatabaseId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SongDatabaseId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SongDatabaseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SongDatabaseId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveSongDatabaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.SongDatabaseId != 0) {
        SongDatabaseId = other.SongDatabaseId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SongDatabaseId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveSongDatabaseResponse : pb::IMessage<RemoveSongDatabaseResponse> {
    private static readonly pb::MessageParser<RemoveSongDatabaseResponse> _parser = new pb::MessageParser<RemoveSongDatabaseResponse>(() => new RemoveSongDatabaseResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveSongDatabaseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SeppoService.SongDatabaseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongDatabaseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongDatabaseResponse(RemoveSongDatabaseResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSongDatabaseResponse Clone() {
      return new RemoveSongDatabaseResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveSongDatabaseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveSongDatabaseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveSongDatabaseResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
